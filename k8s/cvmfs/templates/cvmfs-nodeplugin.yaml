apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: cvmfs-nodeplugin
  namespace: cvmfs
  labels: 
    k8s-app: cvmfs-nodeplugin
spec:
  selector:
    matchLabels:
      k8s-app: cvmfs-nodeplugin
  template:
    metadata: 
      labels:
        k8s-app: cvmfs-nodeplugin
    spec:
      serviceAccount: cvmfs-nodeplugin
      initContainers:
      - name: create-mountpoint
        image: busybox
        securityContext:
          privileged: true
          capabilities:
            add: ["SYS_ADMIN"]
          allowPrivilegeEscalation: true
        command: ['sh', '-c', "mkdir -p /cvmfs-root/cvmfs-k8s"]
        resources:
           limits:
             memory: 0.5Gi
             cpu: 1
           requests:
             memory: 0.2Gi
             cpu: 0.01
        volumeMounts:
        - mountPath: /cvmfs-root
          name:  cvmfs-root
      tolerations:
        - effect: NoSchedule
          key: nvidia.com/gpu
          operator: Exists
        - effect: NoSchedule
          key: arm-processor
          operator: Exists
      containers:
      - name: cvmfs
        image: {{ .Values.image_name }}
        imagePullPolicy: Always
        securityContext:
          privileged: true
          capabilities:
            add: ["SYS_ADMIN"]
          allowPrivilegeEscalation: true
        lifecycle:
          preStop:
            exec:
              command: ["/usr/local/sbin/unmount-and-terminate.sh"]
        env:
        - name: MOUNT_REPOS
          value: {{ join ".cern.ch," .Values.repositories | printf "%s.cern.ch" }}
        - name: SQUID_URI
          value: {{ default "DIRECT" .Values.squid_endpoint }}
        - name: QUOTA_LIMIT
          value: {{ default 50000 .Values.quota_limit }}
        resources:
           limits:
             memory: 4Gi
             cpu: 1
           requests:
             memory: 0.5Gi
             cpu: 0.01
        startupProbe:
          exec:
            command: # returns 0(=Success) only if there are the correct amount of cvmfs mounts
              - /bin/sh
              - -c
              - {{len .Values.repositories | printf "[ `df -h | grep cvmfs2 | wc -l` -eq %d ]" | quote}}
          initialDelaySeconds: {{ default 300 .Values.startup_initial_delay }}
          periodSeconds: {{ default 60 .Values.probe_period }}
          failureThreshold: 10
        livenessProbe:
          exec:
            command:  # returns 0(=Success) only if there are the correct amount of cvmfs mounts
              - /bin/sh
              - -c
              - {{len .Values.repositories | printf "[ `df -h | grep cvmfs2 | wc -l` -eq %d ]" | quote}}
          # initialDelaySeconds: {{ default 600 .Values.liveness_initial_delay }}
          periodSeconds: {{ default 60 .Values.probe_period }}
          failureThreshold: 5
        volumeMounts:
        - name:  cvmfs-root
          mountPath: /cvmfs
          subPath: cvmfs-k8s
          mountPropagation: Bidirectional
      terminationGracePeriodSeconds: 30
      {{ if .Values.use_priority_class }}
        priorityClassName: system-node-critical
      {{ end }}
      volumes:
      - name: cvmfs-root
        persistentVolumeClaim:
          claimName: cvmfs-root
