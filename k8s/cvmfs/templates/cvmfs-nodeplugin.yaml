apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: cvmfs-nodeplugin
  namespace: cvmfs
  labels: 
    k8s-app: cvmfs-nodeplugin
spec:
  selector:
    matchLabels:
      k8s-app: cvmfs-nodeplugin
  template:
    metadata: 
      labels:
        k8s-app: cvmfs-nodeplugin
    spec:
      serviceAccount: cvmfs-nodeplugin
      tolerations:
        - effect: NoSchedule
          key: nvidia.com/gpu
          operator: Exists
        - effect: NoSchedule
          key: arm-processor
          operator: Exists
      containers:
      - name: cvmfs
        image: {{ .Values.image_name }}
        imagePullPolicy: Always
        securityContext:
          privileged: true
          capabilities:
            add: ["SYS_ADMIN"]
          allowPrivilegeEscalation: true
        lifecycle:
          preStop:
            exec:
              command: ["/usr/local/sbin/unmount-and-terminate.sh"]
        env:
        - name: MOUNT_REPOS
          value: {{ join ".cern.ch," .Values.repositories | printf "%s.cern.ch" }}
        - name: SQUID_URI
          value: {{ default "DIRECT" .Values.squid_endpoint }}
        - name: QUOTA_LIMIT
          value: "{{ default 50000 .Values.quota_limit }}"
        - name: CVMFS_DEBUGLOG
          value: {{ default "" .Values.debuglog }}
        - name: CVMFS_USYSLOG
          value: {{ default "" .Values.usyslog }}
        - name: CVMFS_MEMCACHE_SIZE
          value: "{{ default "" .Values.memcache_size }}"
        resources:
           limits:
             memory: "{{ default 4 .Values.limits_mem }}Gi"
             cpu: "{{ default 1 .Values.limits_cpu }}"
           requests:
             memory: "{{ default 0.5 .Values.requests_mem }}Gi"
             cpu: "{{ default 0.25 .Values.requests_cpu }}"
        startupProbe:
          exec:
            command: # returns 0(=Success) only if there are the correct amount of cvmfs mounts
              - /bin/sh
              - -c
              - {{len .Values.repositories | printf "[ `df -h | grep cvmfs2 | wc -l` -eq %d ]" | quote}}
          initialDelaySeconds: {{ default 300 .Values.startup_initial_delay }}
          periodSeconds: {{ default 60 .Values.probe_period }}
          failureThreshold: 10
        {{ if not .Values.skip_liveness }}
        livenessProbe:
          exec:
            command: # returns 0(=Success) only if there are the correct amount of cvmfs mounts
              - /bin/sh
              - -c
              - {{len .Values.repositories | printf "[ `df -h | grep cvmfs2 | wc -l` -eq %d ]" | quote}}
          # initialDelaySeconds is replaced by startupProbe above
          periodSeconds: {{ default 60 .Values.probe_period }}
          failureThreshold: 5
        {{ end }}
        volumeMounts:
        - mountPath: /cvmfs
          name:  cvmfs-base
          mountPropagation: Bidirectional
      terminationGracePeriodSeconds: 30
      priorityClassName: cvmfs-high-prio
      volumes:
      - name: cvmfs-base
        hostPath:
          path: /var/lib/cvmfs-k8s
          type: DirectoryOrCreate
